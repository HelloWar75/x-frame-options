const express = require('express');
const axios = require('axios');
const mime = require('mime');
const morgan = require('morgan');
const { URL } = require('url');
const mysql = require('mysql');
const fs = require('fs');

const cache_minutes = 1;

const app = express();
const port = process.env.PORT || 3000;
const conn = mysql.createPool({
    connectionLimit : 5,
    host: 'localhost',
    port: 3306,
    user: 'root',
    password: '12592075',
    database: 'url_cache'
});

app.use(morgan('tiny'));

const regex = /\s+(href|src)=['"](.*?)['"]/g;

const getMimeType = url => {
    if(url.indexOf('?') !== -1) { // remove url query so we can have a clean extension
        url = url.split("?")[0];
    }
    if(mime.getType(url) === 'application/x-msdownload') return 'text/html';
    return mime.getType(url) || 'text/html'; // if there is no extension return as html
};

app.get('/', (req, res) => {
    const { url } = req.query; // get url parameter
    if(!url) {
        res.type('text/html');
        return res.end("You need to specify <code>url</code> query parameter");
    }

    let query = conn.query('SELECT * FROM urls WHERE url = ? LIMIT 1', [url], function(err, result) {
        if( result.length > 0 ) {
            let id_file = result[0].id;
            let path_file = "./cache/" + id_file + ".cache";
            let actual_date = Math.round((new Date()).getTime() / 1000);
            console.log(actual_date);
            console.log((result[0].updated_at + (60*cache_minutes)));
            if( actual_date < (result[0].updated_at + (60*cache_minutes)) ) {
                //Checa se arquivo existe
                if( fs.existsSync(path_file) ) {
                    //Arquivo existe ?
                    res.type('text/html');
                    res.sendFile("cache/" + id_file + ".cache", { root: __dirname });
                }else{
                    axios.get(url, { responseType: 'arraybuffer'  }) // set response type array buffer to access raw data
                        .then(({ data }) => {
                            const urlMime = getMimeType(url); // get mime type of the requested url
                            if(urlMime === 'text/html') { // replace links only in html
                                data = data.toString().replace(regex, (match, p1, p2)=>{
                                    let newUrl = '';
                                    if(p2.indexOf('http') !== -1) {
                                        newUrl = p2;
                                    } else if (p2.substr(0,2) === '//') {
                                        newUrl = 'http:' + p2;
                                    } else {
                                        const searchURL = new URL(url);
                                        newUrl = searchURL.protocol + '//' + searchURL.host + p2;
                                    }
                                    return ` ${p1}="${req.protocol}://${req.hostname}?url=${newUrl}"`;
                                });
                            }
                            try {
                                fs.writeFileSync(path_file, data, 'utf8');
                            }catch(e){
                                console.log("ERRO!");
                            }
                            res.type(urlMime);
                            res.send(data);
                        }).catch(error => {
                        console.log(error);
                    });
                }
            }else{
                console.log("CACHE EXPIRADO GERANDO ARQUIVO NOVO!");
                //Expirou o tempo de cache
                axios.get(url, { responseType: 'arraybuffer'  }) // set response type array buffer to access raw data
                    .then(({ data }) => {
                        const urlMime = getMimeType(url); // get mime type of the requested url
                        if(urlMime === 'text/html') { // replace links only in html
                            data = data.toString().replace(regex, (match, p1, p2)=>{
                                let newUrl = '';
                                if(p2.indexOf('http') !== -1) {
                                    newUrl = p2;
                                } else if (p2.substr(0,2) === '//') {
                                    newUrl = 'http:' + p2;
                                } else {
                                    const searchURL = new URL(url);
                                    newUrl = searchURL.protocol + '//' + searchURL.host + p2;
                                }
                                return ` ${p1}="${req.protocol}://${req.hostname}?url=${newUrl}"`;
                            });
                        }
                        try {
                            fs.writeFileSync(path_file, data, 'utf8');
                        }catch(e){
                            console.log("ERRO!");
                        }
                        conn.query('UPDATE urls SET updated_at = ? WHERE id = ?', [actual_date, id_file]);
                        res.type(urlMime);
                        res.send(data);
                    }).catch(error => {
                    console.log(error);
                });
            }
        }else{
            let actual_date = Math.round((new Date()).getTime() / 1000);
            console.log("CRIANDO NO DB");
            conn.query('INSERT INTO urls (url, created_at, updated_at) VALUES (?, ?, ?)', [url, actual_date, actual_date], function(err, result) {
                console.log(result.insertId);
                conn.query('SELECT * FROM urls WHERE url = ? LIMIT 1', [url], function(err, result) {
                    let id_file = result[0].id;
                    let path_file = "./cache/" + id_file + ".cache";
                    let actual_date = Math.round((new Date()).getTime() / 1000);
                    console.log(actual_date);
                    console.log((result[0].updated_at + (60*cache_minutes)));
                    if( actual_date < (result[0].updated_at + (60*cache_minutes)) ) {
                        //Checa se arquivo existe
                        if( fs.existsSync(path_file) ) {
                            //Arquivo existe ?
                            res.type('text/html');
                            res.sendFile("cache/" + id_file + ".cache", { root: __dirname });
                        }else{
                            axios.get(url, { responseType: 'arraybuffer'  }) // set response type array buffer to access raw data
                                .then(({ data }) => {
                                    const urlMime = getMimeType(url); // get mime type of the requested url
                                    if(urlMime === 'text/html') { // replace links only in html
                                        data = data.toString().replace(regex, (match, p1, p2)=>{
                                            let newUrl = '';
                                            if(p2.indexOf('http') !== -1) {
                                                newUrl = p2;
                                            } else if (p2.substr(0,2) === '//') {
                                                newUrl = 'http:' + p2;
                                            } else {
                                                const searchURL = new URL(url);
                                                newUrl = searchURL.protocol + '//' + searchURL.host + p2;
                                            }
                                            return ` ${p1}="${req.protocol}://${req.hostname}?url=${newUrl}"`;
                                        });
                                    }
                                    try {
                                        fs.writeFileSync(path_file, data, 'utf8');
                                    }catch(e){
                                        console.log("ERRO!");
                                    }
                                    res.type(urlMime);
                                    res.send(data);
                                }).catch(error => {
                                console.log(error);
                            });
                        }
                    }else{
                        console.log("CACHE EXPIRADO GERANDO ARQUIVO NOVO!");
                        //Expirou o tempo de cache
                        axios.get(url, { responseType: 'arraybuffer'  }) // set response type array buffer to access raw data
                            .then(({ data }) => {
                                const urlMime = getMimeType(url); // get mime type of the requested url
                                if(urlMime === 'text/html') { // replace links only in html
                                    data = data.toString().replace(regex, (match, p1, p2)=>{
                                        let newUrl = '';
                                        if(p2.indexOf('http') !== -1) {
                                            newUrl = p2;
                                        } else if (p2.substr(0,2) === '//') {
                                            newUrl = 'http:' + p2;
                                        } else {
                                            const searchURL = new URL(url);
                                            newUrl = searchURL.protocol + '//' + searchURL.host + p2;
                                        }
                                        return ` ${p1}="${req.protocol}://${req.hostname}?url=${newUrl}"`;
                                    });
                                }
                                try {
                                    fs.writeFileSync(path_file, data, 'utf8');
                                }catch(e){
                                    console.log("ERRO!");
                                }
                                conn.query('UPDATE urls SET updated_at = ? WHERE id = ?', [actual_date, id_file]);
                                res.type(urlMime);
                                res.send(data);
                            }).catch(error => {
                            console.log(error);
                        });
                    }
                });
            });
        }
    });
});



app.listen(port, () => console.log(`Listening on port ${port}!`));
